# Copyright (c) 2023 Klemens D. Morgenstern
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)


import os ;
import feature ;
project : requirements
  <define>BOOST_ASIO_NO_DEPRECATED
  <toolset>msvc:<define>_SCL_SECURE_NO_WARNINGS
  <toolset>msvc:<define>_CRT_SECURE_NO_DEPRECATE
  <toolset>msvc:<cxxflags>/bigobj
  <target-os>windows:<define>WIN32_LEAN_AND_MEAN
  <target-os>linux:<linkflags>-lpthread
  : source-location ../src
;


feature.feature boost.async.pmr : std boost-container custom : propagated composite ;
feature.compose <boost.async.pmr>std             : <define>BOOST_ASYNC_USE_STD_PMR=1 ;
feature.compose <boost.async.pmr>boost-container : <define>BOOST_ASYNC_USE_BOOST_CONTAINER_PMR=1 ;
feature.compose <boost.async.pmr>custom          : <define>BOOST_ASYNC_USE_CUSTOM_PMR=1 ;


alias async_sources
   : detail/exception.cpp
     detail/util.cpp
     channel.cpp
     error.cpp
     main.cpp
     this_thread.cpp
     thread.cpp
   ;

explicit async_sources ;

lib boost_async
   : async_sources /boost//container
   : requirements <define>BOOST_ASYNC_SOURCE=1
     <link>shared:<define>BOOST_ASYNC_DYN_LINK=1
   : usage-requirements  <boost.async.pmr>pmr:<library>/boost//container

   ;

boost-install boost_async ;

